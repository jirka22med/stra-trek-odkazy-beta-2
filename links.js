// links.js

// Zde bude tv√© pole s poƒç√°teƒçn√≠mi odkazy.
// D≈ÆLE≈ΩIT√â: Obsahuje pouze HTTPS URL adresy pro zaji≈°tƒõn√≠ online funkƒçnosti.
const initialLinks = [
    { name: 'Starfleet Command', url: 'https://www.startrek.com' },
    { name: 'Vincentka Sirup', url: 'https://www.benu.cz/vincentka-sirup-s-jitrocelem-a-materidouskou-200ml' },
    { name: 'Star Trek Universe', url: 'https://jirka22med.github.io/star-trek-universe/' },
    { name: 'QR K√≥d Gener√°tor', url: 'https://jirka22med.github.io/qr-kod-generato-novy/' },
    { name: 'ST Hudebn√≠ p≈ôehr√°vaƒç (mobil)', url: 'https://jirka22med.github.io/Star-Trek-audio-prehravac-novy-2/' },
    { name: 'ST Hudebn√≠ p≈ôehr√°vaƒç v.2.1', url: 'https://jirka22med.github.io/Star-Trek-Hudebni-prehravac/' },
    { name: 'Star Trek Hudebn√≠ P≈ôehravaƒç 3', url: 'https://jirka22med.github.io/-jirka22med-star-trek-audio-player-v.3/' },
    { name: 'M≈Øj osobn√≠ web (Genesis)', url: 'https://jirka22med.github.io/jirikuv-projekt-genesis/index.html' },
    { name: 'Pokroƒçil√Ω v√°hov√Ω tracker', url: 'https://jirka22med.github.io/moje-vaha-log-beta-2/' },
    { name: 'Jirk≈Øv v√°hov√Ω tracker', url: 'https://jirka22med.github.io/jirikuv-vahovy-tracker/' },
    { name: 'audio prehravac test', url: 'https://jirka22med.github.io/-jirka22med-star-trek-audio-player-v.3/' },
    { name: 'prehravac', url: 'https://jirka22med.github.io/star-trek-hudebni-prehravac-2/' },
    { name: 'firebase-synced-player', url: 'https://jirka22med.github.io/firebase-synced-player/' },
    { name: 'Star Trek: Kapitoly', url: 'https://jirka22med.github.io/Pribehy-posadek-Enerprise/' },
    { name: 'M≈Øj osobn√≠ web', url: 'https://jirka22med.github.io/muj-osobni-web/' },
    { name: 'Example Link 8', url: 'https://example.com/link8' },    
    { name: 'Example Link 9', url: 'https://example.com/link9' },
    { name: 'Example Link 10', url: 'https://example.com/link10' },
    { name: 'Example Link 11', url: 'https://example.com/link11' },
    { name: 'Example Link 12', url: 'https://example.com/link12' },
    { name: 'Example Link 13', url: 'https://example.com/link13' },
    { name: 'Example Link 14', url: 'https://example.com/link14' },
    { name: 'Example Link 15', url: 'https://example.com/link15' },
    { name: 'Example Link 16', url: 'https://example.com/link16' },
    { name: 'Example Link 17', url: 'https://example.com/link17' },
    { name: 'Example Link 18', url: 'https://example.com/link18' },
];


// Z√≠sk√°n√≠ odkaz≈Ø na HTML elementy
const linksTableBody = document.getElementById('linksTableBody');
const addLinkButton = document.getElementById('addLinkButton');
const linkNameInput = document.getElementById('linkName');
const linkUrlInput = document.getElementById('linkUrl');
const syncStatusMessageElement = document.getElementById('syncStatusMessage');
const clearAllLinksButton = document.getElementById('clearAllLinksButton'); // Tlaƒç√≠tko pro smaz√°n√≠ v≈°ech odkaz≈Ø

// NOV√â: Z√≠sk√°n√≠ odkaz≈Ø na elementy modalu
const editLinkModal = document.getElementById('editLinkModal');
const modalLinkId = document.getElementById('modalLinkId');
const modalLinkName = document.getElementById('modalLinkName');
const modalLinkUrl = document.getElementById('modalLinkUrl');
const saveEditButton = document.getElementById('saveEditButton');
const cancelEditButton = document.getElementById('cancelEditButton');


// Funkce pro zobrazen√≠/skryt√≠ zpr√°vy o synchronizaci
function toggleSyncMessage(show) {
    if (syncStatusMessageElement) {
        syncStatusMessageElement.style.display = show ? 'block' : 'none';
    }
}

// NOV√â: Funkce pro zobrazen√≠ modalu
function showEditModal(id, name, url) {
    modalLinkId.value = id; // Ulo≈æ√≠me ID do skryt√©ho pole
    modalLinkName.value = name;
    modalLinkUrl.value = url;
    editLinkModal.style.display = 'flex'; // Zobraz√≠me modal (nastav√≠me flex pro centrov√°n√≠)
}

// NOV√â: Funkce pro skryt√≠ modalu
function hideEditModal() {
    editLinkModal.style.display = 'none'; // Skryjeme modal
    modalLinkId.value = ''; // Vyƒçist√≠me hodnoty (dobr√° praxe)
    modalLinkName.value = '';
    modalLinkUrl.value = '';
}


// Funkce pro dynamick√© plnƒõn√≠ tabulky (UPRAVENO: P≈ôid√° tlaƒç√≠tka pro p≈ôesun A EDITACI)
function populateLinksTable(links) {
    linksTableBody.innerHTML = '';    

    if (links.length === 0) {
        const noDataRow = document.createElement('tr');
        noDataRow.innerHTML = `<td colspan="4" style="text-align: center; color: #888;">≈Ω√°dn√© odkazy v Hvƒõzdn√© datab√°zi.</td>`;
        linksTableBody.appendChild(noDataRow);
        return;
    }

    links.forEach((link, index) => { // Link objekt by mƒõl nyn√≠ obsahovat orderIndex z Firebase
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${index + 1}</td>
            <td>${link.name}</td>
            <td><a href="${link.url}" target="_blank" title="${link.url}">${link.url.length > 50 ? link.url.substring(0, 47) + '...' : link.url}</a></td>
            <td>
                <div class="action-buttons">
                    <button class="move-up-button" data-id="${link.id}" data-order="${link.orderIndex}" ${index === 0 ? 'disabled' : ''}>‚¨ÜÔ∏è</button>
                    <button class="move-down-button" data-id="${link.id}" data-order="${link.orderIndex}" ${index === links.length - 1 ? 'disabled' : ''}>‚¨áÔ∏è</button>
                    <button class="edit-link-button" data-id="${link.id}" data-name="${link.name}" data-url="${link.url}">‚úèÔ∏è</button> <button class="delete-link-button" data-id="${link.id}">üóëÔ∏è</button>
                </div>
            </td>
        `;
        linksTableBody.appendChild(row);

        // Posluchaƒçe ud√°lost√≠ pro tlaƒç√≠tka Smazat, Nahoru, Dol≈Ø
        row.querySelector('.delete-link-button').addEventListener('click', async (e) => {
            const linkIdToDelete = e.target.dataset.id;
            if (confirm('Opravdu chcete smazat tento odkaz z Hvƒõzdn√© datab√°ze? Tato akce je nevratn√°.')) {
                toggleSyncMessage(true);    
                const success = await window.deleteLinkFromFirestore(linkIdToDelete);
                if (success) {
                    await loadAndDisplayLinks();    
                } else {
                    alert('Chyba p≈ôi maz√°n√≠ odkazu. Zkuste to pros√≠m znovu.');
                }
                toggleSyncMessage(false);    
            }
        });

        // Posluchaƒçe pro tlaƒç√≠tka p≈ôesunu
        row.querySelector('.move-up-button').addEventListener('click', async (e) => {
            const currentLink = { id: e.target.dataset.id, orderIndex: parseInt(e.target.dataset.order) };
            await moveLink(currentLink, 'up', links);    
        });

        row.querySelector('.move-down-button').addEventListener('click', async (e) => {
            const currentLink = { id: e.target.dataset.id, orderIndex: parseInt(e.target.dataset.order) };
            await moveLink(currentLink, 'down', links);    
        });

        // √öPRAVA: Posluchaƒç pro tlaƒç√≠tko EDITACE - nyn√≠ zobraz√≠ modal m√≠sto promptu
        row.querySelector('.edit-link-button').addEventListener('click', (e) => {
            const linkId = e.target.dataset.id;
            const linkName = e.target.dataset.name;
            const linkUrl = e.target.dataset.url;
            showEditModal(linkId, linkName, linkUrl); // Zobraz√≠ modal s daty
        });
    });
}

// Funkce: P≈ôesun odkazu nahoru/dol≈Ø
async function moveLink(currentLink, direction, allLinks) {
    const currentIndex = allLinks.findIndex(link => link.id === currentLink.id);
    let targetIndex = -1;

    if (direction === 'up' && currentIndex > 0) {
        targetIndex = currentIndex - 1;
    } else if (direction === 'down' && currentIndex < allLinks.length - 1) {
        targetIndex = currentIndex + 1;
    }

    if (targetIndex !== -1) {
        const targetLink = allLinks[targetIndex];    

        toggleSyncMessage(true);
        const success = await window.updateLinkOrderInFirestore(
            currentLink.id, currentLink.orderIndex,
            targetLink.id, targetLink.orderIndex
        );

        if (success) {
            await loadAndDisplayLinks();    
        } else {
            alert(`Chyba p≈ôi p≈ôesouv√°n√≠ odkazu ${direction === 'up' ? 'nahoru' : 'dol≈Ø'}. Zkuste to pros√≠m znovu.`);
        }
        toggleSyncMessage(false);
    }
}


// Funkce: Jednor√°zov√Ω import poƒç√°teƒçn√≠ch odkaz≈Ø do Firebase
async function importInitialLinksToFirebase() {
    console.log("links.js: Detekov√°na pr√°zdn√° datab√°ze. Spou≈°t√≠m import poƒç√°teƒçn√≠ch odkaz≈Ø.");
    toggleSyncMessage(true);
    let successCount = 0;
    for (let i = 0; i < initialLinks.length; i++) {
        const link = initialLinks[i];
        const success = await window.addLinkToFirestore(link.name, link.url, i);    
        if (success) {
            successCount++;
        } else {
            console.error(`links.js: Chyba p≈ôi importu odkazu: ${link.name}`);
        }
    }
    console.log(`links.js: Import dokonƒçen. √öspƒõ≈°nƒõ importov√°no ${successCount} z ${initialLinks.length} odkaz≈Ø.`);
    toggleSyncMessage(false);
    await loadAndDisplayLinks();    
}


// Funkce pro naƒçten√≠ a zobrazen√≠ odkaz≈Ø
async function loadAndDisplayLinks() {
    toggleSyncMessage(true);    

    const firebaseInitialized = await window.initializeFirebaseLinksApp();
    if (!firebaseInitialized) {
        console.error("Chyba: Firebase pro odkazy nebylo inicializov√°no.");
        linksTableBody.innerHTML = '<tr><td colspan="4" style="text-align: center; color: #dc3545;">Chyba: Nelze se p≈ôipojit k datab√°zi odkaz≈Ø. Zkontrolujte p≈ôipojen√≠ a Firebase konzoli.</td></tr>';
        toggleSyncMessage(false);    
        return;
    }

    let links = await window.getLinksFromFirestore();
    
    // Logika "POƒå√ÅTEƒåN√çHO OSIVA"
    if (links.length === 0 && initialLinks.length > 0) {
        console.log("links.js: Firebase datab√°ze odkaz≈Ø je pr√°zdn√°, ale initialLinks obsahuje data.");
        await importInitialLinksToFirebase();
        links = await window.getLinksFromFirestore();
    }

    populateLinksTable(links);
    
    toggleSyncMessage(false);    
}

// Obsluha p≈ôid√°n√≠ odkazu
if (addLinkButton) {
    addLinkButton.addEventListener('click', async () => {
        const linkName = linkNameInput.value.trim();
        const linkUrl = linkUrlInput.value.trim();

        if (linkName && linkUrl) {
            toggleSyncMessage(true);    
            const currentLinks = await window.getLinksFromFirestore();
            const newOrderIndex = currentLinks.length > 0 ? Math.max(...currentLinks.map(l => l.orderIndex)) + 1 : 0;

            const success = await window.addLinkToFirestore(linkName, linkUrl, newOrderIndex);
            if (success) {
                linkNameInput.value = '';    
                linkUrlInput.value = '';
                await loadAndDisplayLinks();    
            } else {
                alert('Chyba p≈ôi p≈ôid√°v√°n√≠ odkazu. Zkuste to pros√≠m znovu.');
            }
            toggleSyncMessage(false);    
        } else {
            alert('Pros√≠m, zadejte n√°zev i URL odkazu.');
        }
    });
}

// NOV√â: Obsluha tlaƒç√≠tka pro smaz√°n√≠ V≈†ECH odkaz≈Ø (OPRAVENO!)
if (clearAllLinksButton) {
    clearAllLinksButton.addEventListener('click', async () => {
        console.log("clearAllLinksButton: Spu≈°tƒõn proces maz√°n√≠ V≈†ECH odkaz≈Ø.");
        if (confirm('‚ö†Ô∏è OPRAVDU chcete smazat V≈†ECHNY odkazy z Hvƒõzdn√© datab√°ze? Tato akce nelze vr√°tit zpƒõt!')) {
            if (confirm('‚ö†Ô∏è JSTE SI ABSOLUTNƒö JISTI? V≈°echny odkazy budou nen√°vratnƒõ ztraceny!')) {
                toggleSyncMessage(true);
                
                try {
                    // Z√≠sk√°me v≈°echny odkazy a postupnƒõ je sma≈æeme
                    const allLinks = await window.getLinksFromFirestore();
                    let deleteCount = 0;
                    
                    for (const link of allLinks) {
                        const success = await window.deleteLinkFromFirestore(link.id);
                        if (success) {
                            deleteCount++;
                        }
                    }
                    
                    console.log(`Smaz√°no ${deleteCount} z ${allLinks.length} odkaz≈Ø.`);
                    
                    if (deleteCount === allLinks.length) {
                        await loadAndDisplayLinks();
                        alert('V≈°echny odkazy byly √∫spƒõ≈°nƒõ smaz√°ny a datab√°ze resetov√°na!');
                    } else {
                        alert(`Smaz√°no pouze ${deleteCount} z ${allLinks.length} odkaz≈Ø. Zkuste to pros√≠m znovu.`);
                    }
                    
                } catch (error) {
                    console.error("Chyba p≈ôi maz√°n√≠ v≈°ech odkaz≈Ø:", error);
                    alert('Chyba p≈ôi maz√°n√≠ v≈°ech odkaz≈Ø. Zkuste to pros√≠m znovu.');
                }
                
                toggleSyncMessage(false);
            } else {
                console.log("clearAllLinksButton: Maz√°n√≠ v≈°ech odkaz≈Ø zru≈°eno u≈æivatelem (2. f√°ze).");
            }
        } else {
            console.log("clearAllLinksButton: Maz√°n√≠ v≈°ech odkaz≈Ø zru≈°eno u≈æivatelem (1. f√°ze).");
        }
    });
}

// NOV√â: Posluchaƒç pro tlaƒç√≠tko Ulo≈æit v modalu
if (saveEditButton) {
    saveEditButton.addEventListener('click', async () => {
        const id = modalLinkId.value;
        const newName = modalLinkName.value.trim();
        const newUrl = modalLinkUrl.value.trim();

        if (!newName || !newUrl) {
            alert('N√°zev ani URL odkazu nemohou b√Ωt pr√°zdn√©.');
            return;
        }

        // Z√≠sk√°n√≠ p≈Øvodn√≠ch hodnot pro kontrolu, zda do≈°lo ke zmƒõnƒõ
        // V ide√°ln√≠m p≈ô√≠padƒõ by se p≈Øvodn√≠ hodnoty mƒõly z√≠skat z aktu√°ln√≠ho stavu dat.
        // Pro zjednodu≈°en√≠ teƒè p≈ôedpokl√°d√°me, ≈æe pokud u≈æivatel klikne Save, oƒçek√°v√° zmƒõnu,
        // nebo se vr√°t√≠ k prompt logice (co≈æ nedƒõl√°me s modalem takto).
        // Pro precizn√≠ kontrolu by se musel naƒç√≠st konkr√©tn√≠ odkaz z Firebase.
        // Nyn√≠ se budeme spol√©hat na to, ≈æe updateLinkInFirestore se provede, pokud se zadaj√≠ nov√© hodnoty.

        toggleSyncMessage(true);
        const success = await window.updateLinkInFirestore(id, newName, newUrl);
        
        if (success) {
            alert('Odkaz byl √∫spƒõ≈°nƒõ aktualizov√°n!');
            hideEditModal(); // Skryjeme modal
            await loadAndDisplayLinks(); // Znovu naƒçteme a zobraz√≠me odkazy
        } else {
            alert('Chyba p≈ôi aktualizaci odkazu. Zkuste to pros√≠m znovu.');
        }
        toggleSyncMessage(false);
    });
}

// NOV√â: Posluchaƒç pro tlaƒç√≠tko Zru≈°it v modalu
if (cancelEditButton) {
    cancelEditButton.addEventListener('click', () => {
        hideEditModal(); // Jednodu≈°e skryjeme modal
    });
}


// Inicializace: Naƒçten√≠ a zobrazen√≠ odkaz≈Ø p≈ôi naƒçten√≠ str√°nky
document.addEventListener('DOMContentLoaded', loadAndDisplayLinks);
